AWSTemplateFormatVersion: 2010-09-09
Description: |
  AWS VPN Demo:
  https://github.com/barracuda-cloudgen-access/deploy-scripts/tree/main/presentations/aws-vpn-demo
  **WARNING** This template creates an Amazon EC2 instance.
  You will be billed for the AWS resources used if you create a stack from this template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - SubnetCidr
          - VpnCidr
      - Label:
          default: "Amazon EC2 Configuration"
        Parameters:
          - InstanceType
          - KeyName
      - Label:
          default: "VPN Configuration"
        Parameters:
          - CertificateArnServer
          - CertificateArnClient1
    ParameterLabels:
      VpcCidr:
        default: "VPC Cidr"
      SubnetCidr:
        default: "Subnet Cidr"
      VpnCidr:
        default: "VPN Cidr"
      InstanceType:
        default: "Instance Type"
      Key Name:
        default: "Key Name"
      CertificateArnServer:
        default: "Certificate Arn for VPN Server"
      CertificateArnClient1:
        default: "Certificate Arn for VPN Client 1"

Parameters:

  VpcCidr:
    Description:  >-
      The IP address range for the VPC
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  SubnetCidr:
    Description: >-
      The IP address range for the Subnet
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VpnCidr:
    Description: >-
      The IP address range for the VPN - must be at least a /22 range
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.16.0.0/22
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  InstanceType:
    Description: >-
      WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: >-
      Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  CertificateArnServer:
    Description: >-
      Certificate Manager ARN to use for the VPN Server
    Type: String
    MinLength: '70'
    AllowedPattern: '^arn:aws:acm:.*:.*:certificate/.*$'

  CertificateArnClient1:
    Description: >-
      Certificate Manager ARN to use for the VPN Client1
    Type: String
    MinLength: '70'
    AllowedPattern: '^arn:aws:acm:.*:.*:certificate/.*$'

Mappings:
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64

  AWSInstanceType2NATArch:
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64

  AWSRegionArch2AMI:
    af-south-1:
      HVM64: ami-064cc455f8a1ef504
    ap-east-1:
      HVM64: ami-f85b1989
    ap-northeast-1:
      HVM64: ami-0b2c2a754d5b4da22
    ap-northeast-2:
      HVM64: ami-0493ab99920f410fc
    ap-northeast-3:
      HVM64: ami-01344f6f63a4decc1
    ap-south-1:
      HVM64: ami-03cfb5e1fb4fac428
    ap-southeast-1:
      HVM64: ami-0ba35dc9caf73d1c7
    ap-southeast-2:
      HVM64: ami-0ae99b503e8694028
    ca-central-1:
      HVM64: ami-0803e21a2ec22f953
    cn-north-1:
      HVM64: ami-07a3f215cc90c889c
    cn-northwest-1:
      HVM64: ami-0a3b3b10f714a0ff4
    eu-central-1:
      HVM64: ami-0474863011a7d1541
    eu-north-1:
      HVM64: ami-0de4b8910494dba0f
    eu-south-1:
      HVM64: ami-08427144fe9ebdef6
    eu-west-1:
      HVM64: ami-015232c01a82b847b
    eu-west-2:
      HVM64: ami-0765d48d7e15beb93
    eu-west-3:
      HVM64: ami-0caf07637eda19d9c
    me-south-1:
      HVM64: ami-0744743d80915b497
    sa-east-1:
      HVM64: ami-0a52e8a6018e92bb0
    us-east-1:
      HVM64: ami-032930428bf1abbff
    us-east-2:
      HVM64: ami-027cab9a7bf0155df
    us-west-1:
      HVM64: ami-088c153f74339f34c
    us-west-2:
      HVM64: ami-01fee56b22f308154

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: !Ref "AWS::StackName"

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref SubnetCidr
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: !Ref "AWS::StackName"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: !Ref "AWS::StackName"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: !Ref "AWS::StackName"

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: !Ref "AWS::StackName"

  InboundDefaultAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: "100"
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  OutBoundDefaultNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: "100"
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP and SSH access from subnet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: !Ref SubnetCidr
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref SubnetCidr
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: "${AWS::StackName}-subnet"

  VPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable external access to VPN server
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: "1194"
          ToPort: "1194"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: "${AWS::StackName}-vpn"

  ClientVpnEndpoint:
    Type: AWS::EC2::ClientVpnEndpoint
    Properties:
      AuthenticationOptions:
        - Type: certificate-authentication
          MutualAuthentication:
            ClientRootCertificateChainArn: !Ref CertificateArnClient1
      ClientCidrBlock: !Ref VpnCidr
      ConnectionLogOptions:
        CloudwatchLogGroup: !Ref CloudWatchLogsGroup
        CloudwatchLogStream: !Ref CloudWatchLogsStream
        Enabled: true
      Description: AWS VPN Demo
      SecurityGroupIds:
        - !Ref VPNSecurityGroup
      SelfServicePortal: disabled
      ServerCertificateArn: !Ref CertificateArnServer
      SplitTunnel: true
      TagSpecifications:
        - ResourceType: client-vpn-endpoint
          Tags:
            - Key: Application
              Value: !Ref "AWS::StackId"
            - Key: Name
              Value: !Ref "AWS::StackName"
      TransportProtocol: udp
      VpcId: !Ref VPC
      VpnPort: 1194

  ClientVpnTargetNetworkAssociation:
    Type: AWS::EC2::ClientVpnTargetNetworkAssociation
    Properties:
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      SubnetId: !Ref Subnet

  ClientVpnAuthorizationRule:
    Type: AWS::EC2::ClientVpnAuthorizationRule
    Properties:
      AuthorizeAllGroups: true
      ClientVpnEndpointId: !Ref ClientVpnEndpoint
      Description: Authorize ClientVpnEndpoint
      TargetNetworkCidr: !Ref SubnetCidr

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws-vpn-demo
      RetentionInDays: 7

  CloudWatchLogsStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref CloudWatchLogsGroup
      LogStreamName: ClientVpnEndpoint

  WebServerInstance:
    Type: AWS::EC2::Instance
    DependsOn: AttachGateway
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join
                - "\n"
                - - <html>
                  - <head>
                  - <title>CGA Demo</title>
                  - !Join
                    - " "
                    - - <style>
                      - body {
                      - font-family
                      - ":"
                      - Verdana, Arial, sans-serif;}
                      - h3{
                      - padding-top
                      - ":"
                      - 20px;}
                      - </style>
                  - </head>
                  - <body>
                  - <center>
                  - <br>
                  - <img src="https://www.fyde.com/hubfs/barracuda/CGA_logo_1342%C3%97250.png" alt="CGA_Logo" width=300/>
                  - <h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>
                  - <h3>
                  - !Ref "AWS::Region"
                  - </h3>
                  - </center>
                  - </body>
                  - </html>
              mode: "000644"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ""
                - - |
                    [main]
                  - stack=
                  - !Ref "AWS::StackId"
                  - |+

                  - region=
                  - !Ref "AWS::Region"
                  - |+

              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ""
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                  - "action=/opt/aws/bin/cfn-init -v "
                  - "         --stack "
                  - !Ref "AWS::StackName"
                  - "         --resource WebServerInstance "
                  - "         --region "
                  - !Ref "AWS::Region"
                  - |+

                  - |
                    runas=root
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref "AWS::Region"
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
        - Key: Name
          Value: !Ref "AWS::StackName"
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup
            - !Ref VPNSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: "0"
          DeleteOnTermination: "true"
          SubnetId: !Ref Subnet
      UserData:
        Fn::Base64: !Join
          - ""
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - "/opt/aws/bin/cfn-init -v "
            - "         --stack "
            - !Ref "AWS::StackName"
            - "         --resource WebServerInstance "
            - "         --region "
            - !Ref "AWS::Region"
            - |+

            - "/opt/aws/bin/cfn-signal -e $? "
            - "         --stack "
            - !Ref "AWS::StackName"
            - "         --resource WebServerInstance "
            - "         --region "
            - !Ref "AWS::Region"
            - |+

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

Outputs:

  InternalURL:
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt
          - WebServerInstance
          - PrivateIp
    Description: Newly created application URL
